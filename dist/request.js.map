{"version":3,"sources":["../src/request.js"],"names":[],"mappings":"kpBAAA,oC;AACA;AACA,gC;AACA,8B;;AAEA,IAAM,0BAA0B,KAAhC;AACA,IAAM,uBAA0B,GAAhC,C;;AAEM,O;AACJ,mBAAY,QAAZ,EAAsB,OAAtB,EAA+B;AAC7B,SAAK,YAAL,GAAoB,oBAAM,oBAAU,QAAV,EAAoB,OAApB,CAAN,EAApB,CACD,C;;;AAEmB,a,yDAAQ,KAAK,Y;AACxB,oB,mJAAsB,QAAQ,iBAAR,CAA0B,CAA1B;AACQ,oBADR;AAEQ,oBAFR,CAEa,0BAAU,eAAE,QAAF,CAAW,MAAX,EAAmB,cAAnB,CAAV,EAFb,C,2EAAtB,Y;;AAIA,4B;;;;gKAIW,O,yDAAU,I,oBAAM,K,yDAAQ,KAAK,Y;AACzC,oB;AACA,c;AACA,a;;;;;;;;AAQE,e;;;AAGA,e,wJAbmB,KAAK,aAAL,CAAmB,KAAnB,C,QAArB,Y,kBACA,M,GAAe,KAAK,IAAL,CAAU,eAAe,uBAAzB,C,CACf,K,GAAe,KAAK,IAAL,CAAU,eAAe,oBAAzB,C,OAEjB,gBAAgB,uB,gEAEX,KAAK,QAAL,CAAc,CAAd,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B,OAA/B,C,SAID,O,GAAU,QAAQ,KAAR,CAAc,MAAd,EACQ,GADR,CACY,qBAAK,MAAK,aAAL,CAAmB,KAAnB,EAA0B,oBAAM,CAAN,EAA1B,CAAL,EADZ,C,0DAGgB,mBAAQ,GAAR,CAAY,OAAZ,C,uCAA1B,O,gBAAY,O;;AAEX,0BAAU,mBAAQ,GAAR,CAAY,OAAZ,CAAV,GAAiC,O;;;;;6IAK1B,O,yDAAU,I;AACpB,oB;AACA,kB,wJADqB,KAAK,aAAL,E,QAArB,Y,kBACA,U,GAAe,KAAK,IAAL,CAAU,eAAe,oBAAzB,C;;AAEd,qBAAK,QAAL,CAAc,CAAd,EAAiB,cAAc,GAAd,GAAoB,UAApB,GAAiC,GAAlD,EAAuD,OAAvD,C;;;AAGE;AACT,UAAI,aAAJ,EAAU,WAAV,EAAc,cAAc,KAAK,YAAjC,EAA+C,UAAU,IAAzD;;AAEA,qBAAE,IAAF,CAAO,SAAP,EAAkB,aAAK;AACrB,YAAI,eAAE,QAAF,CAAW,CAAX,CAAJ,EAAmB,IAAI,IAAJ,GAAY,KAAK,CAAjB,IAAuB,KAAK,IAAL,EAAW,OAAO,CAAzC;AACnB,YAAI,eAAE,SAAF,CAAY,CAAZ,CAAJ,EAAoB,UAAU,CAAV;AACpB,YAAI,eAAE,UAAF,CAAa,CAAb,CAAJ,EAAqB,cAAc,CAAd,CACtB,CAJD;;;AAMA,wBAAO,EAAP,EAAW,SAAX,EAAsB,EAAtB,CAAyB,KAAzB;AACA,wBAAO,IAAP,EAAa,WAAb,EAA0B,EAA1B,CAA6B,KAA7B;;AAEA,UAAM,QAAQ,eAAE,KAAF,CAAQ,IAAR,EAAc,KAAK,CAAnB;AACE,SADF,CACM,qBAAK,cAAc,OAAd,CAAsB,CAAtB,EAAyB,IAAzB,EAAL,EADN,CAAd;;AAGA,aAAO,UAAU,mBAAQ,GAAR,CAAY,KAAZ,CAAV,GAA+B,KAAtC,CACD,C;;;AAEI,Q,EAAM;AACT,aAAO,KAAK,YAAL;AACK,UADL;AAEK,UAFL,CAEU,IAFV,CAAP,CAGD,C;;;AAEI,Q,EAAM;AACT,aAAO,KAAK,YAAL;AACK,UADL;AAEK,UAFL,CAEU,IAFV,CAAP,CAGD,C;;;AAEE,S,EAAO,O,EAAS;AACjB,aAAO,KAAK,YAAL;AACK,UADL;AAEK,QAFL,CAEQ,KAFR,EAEe,OAFf,CAAP,CAGD,C;;;;AAGH,OAAO,OAAP,GAAiB,OAAjB","file":"request.js","sourcesContent":["import promise from 'bluebird';\nimport {expect} from 'chai';\nimport Query from './query';\nimport _ from './util';\n\nconst MAX_ENTRIES_PER_REQUEST = 10000;\nconst MAX_ENTRIES_PER_PAGE    = 100;\n\nclass Request {\n  constructor(endpoint, options) {\n    this._createQuery = () => new Query(endpoint, options);\n  }\n\n  async getEntryCount(query = this._createQuery) {\n    const [totalEntries] = await query().setEntriesPerPage(1)\n                                        .call()\n                                        .then(result => _.pickDeep(result, 'totalEntries'));\n\n    return totalEntries;\n  }\n\n  // Fetches all entries from query; Queries that are larger than eBay return limit will be split into smaller queries\n  async getAllEntries(consume = true, query = this._createQuery) {\n    const totalEntries = await this.getEntryCount(query);\n    const chunks       = Math.ceil(totalEntries / MAX_ENTRIES_PER_REQUEST);\n    const pages        = Math.ceil(totalEntries / MAX_ENTRIES_PER_PAGE);\n\n    if (totalEntries <= MAX_ENTRIES_PER_REQUEST) {\n\n      return this.getPages(1, pages, query, consume);\n\n    } else {\n\n      const queries = query().split(chunks)\n                             .map(q => this.getAllEntries(false, () => q));\n\n      const results = _.flatten(await promise.all(queries));\n\n      return consume ? promise.all(results) : results;\n    }\n  }\n\n  // Fetches all pages (limited to 100) return from query\n  async getAllPages(consume = true) {\n    const totalEntries = await this.getEntryCount();\n    const totalPages   = Math.ceil(totalEntries / MAX_ENTRIES_PER_PAGE);\n\n    return this.getPages(1, totalPages <= 100 ? totalPages : 100, consume);\n  }\n\n  getPages() {\n    let from, to, createQuery = this._createQuery, consume = true;\n\n    _.each(arguments, v => {\n      if (_.isNumber(v)) v > from ? (to = v) : (to = from, from = v);\n      if (_.isBoolean(v)) consume = v;\n      if (_.isFunction(v)) createQuery = v;\n    });\n\n    expect(to, 'Page to').to.exist;\n    expect(from, 'Page from').to.exist;\n\n    const pages = _.range(from, to + 1)\n                   .map(p => createQuery().setPage(p).call());\n\n    return consume ? promise.all(pages) : pages;\n  }\n\n  then(dest) {\n    return this._createQuery()\n               .call()\n               .then(dest);\n  }\n\n  pipe(dest) {\n    return this._createQuery()\n               .call()\n               .pipe(dest);\n  }\n\n  on(event, handler) {\n    return this._createQuery()\n               .call()\n               .on(event, handler);\n  }\n}\n\nmodule.exports = Request;"]}