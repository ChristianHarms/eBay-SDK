{"version":3,"sources":["../src/api.js"],"names":[],"mappings":"+QAAA,oC;AACA;AACA,8B;;AAEM,G;AACJ,eAAY,QAAZ,EAAsB,OAAtB,EAA+B,cAA/B,EAA+C;AAC7C,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,eAAL,GAAuB,cAAvB,CACD,C;;;AAEI,K,EAAG;AACN,UAAM,QAAQ,kBAAO,EAAP,EAAW,KAAK,eAAhB,EAAiC,eAAe,CAAf,EAAkB,KAAK,QAAvB,CAAjC,CAAd;;AAEA,aAAO,sBAAY,KAAK,SAAjB,EAA4B,KAA5B,EAAmC,KAAK,UAAxC,CAAP,CACD,C;;;;;AAIH,SAAS,cAAT,CAAwB,KAAxB,EAA+B,OAA/B,EAAwC;;AAEtC,SAAO,qBAAU,KAAV,EAAiB,UAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAA0B;AAChD,QAAM,eAAe,QAAQ,KAAR,CAArB;;AAEA,sBAAO,KAAP,EAAc,KAAd,EAAqB,EAArB,CAAwB,KAAxB,CAA8B,GAA9B,CAAkC,GAAlC,CAAsC,KAAtC;AACA,sBAAO,YAAP,EAAqB,WAAW,KAAhC,EAAuC,KAAvC,CAA6C,GAA7C,CAAiD,GAAjD,CAAqD,KAArD;;;AAGA,QAAM,kBAAmB,iBAAiB,WAAlB,GAAiC,CAAC,MAAM,KAAP,CAAjC,GAAiD,KAAzE;;AAEA,QAAI,yBAAc,KAAd,KAAwB,yBAAc,YAAd,CAA5B,EAAyD;AACvD,aAAO,OAAO,eAAP,IAA0B,eAAe,KAAf,EAAsB,YAAtB,CAAjC,CACD;;;AAED,WAAO,OAAO,eAAP,IAA0B,KAAjC,CACD,CAdM,CAAP,CAeD;;;;AAED,OAAO,OAAP,GAAiB,EAAC,QAAD,EAAM,8BAAN,EAAjB","file":"api.js","sourcesContent":["import Request from './request';\nimport {expect} from 'chai';\nimport {extend, get, transform, isPlainObject} from './util';\n\nclass Api {\n  constructor(endpoint, apiList, requiredFields) {\n    this._endpoint = endpoint;\n    this._apiList = apiList;\n    this._requiredFields = requiredFields;\n  }\n\n  call(q) {\n    const query = extend({}, this._requiredFields, normalizeQuery(q, this._apiList));\n\n    return new Request(this._endpoint, query, this._operation);\n  }\n}\n\n/** Validates query and prepends @ to attributes fields */\nfunction normalizeQuery(query, apiList) {\n\n  return transform(query, (result, value, field) => {\n    const matchedField = apiList[field];\n\n    expect(value, field).to.exist.and.not.empty;\n    expect(matchedField, 'Field ' + field).exist.and.not.empty;\n\n    // appends @ to attribute fields\n    const normalizedField = (matchedField === 'attribute') ? ['@' + field] : field;\n\n    if (isPlainObject(value) && isPlainObject(matchedField)) {\n      return result[normalizedField] = normalizeQuery(value, matchedField);\n    }\n\n    return result[normalizedField] = value;\n  });\n}\n\nmodule.exports = {Api, normalizeQuery};\n"]}