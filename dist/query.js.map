{"version":3,"sources":["../src/query.js"],"names":[],"mappings":"6UAAA,iD;AACA,gC;AACA,wB;AACA;AACA,gC;;AAEM,K;AACJ,iBAAY,QAAZ,EAAsB,OAAtB,EAA+B;AAC7B,SAAK,SAAL,GAA2B,QAA3B;AACA,SAAK,QAAL,GAA2B,uBAAU,OAAV,CAA3B;AACA,SAAK,QAAL,CAAc,UAAd,GAA2B,qBAAQ,KAAK,QAAL,CAAc,UAAtB,IAAoC,EAApC,GAAyC,uBAAU,KAAK,QAAL,CAAc,UAAxB,CAApE,CACD,C;;;AAEO,Q,EAAM;AACZ,wBAAO,IAAP,EAAa,OAAb,EAAsB,EAAtB,CAAyB,EAAzB,CAA4B,MAA5B,CAAmC,CAAnC,EAAsC,GAAtC;;AAEA,uBAAI,KAAK,QAAT,EAAmB,4BAAnB,EAAiD,IAAjD;;AAEA,aAAO,IAAP,CACD,C;;;AAEiB,W,EAAS;AACzB,wBAAO,OAAP,EAAgB,SAAhB,EAA2B,EAA3B,CAA8B,EAA9B,CAAiC,MAAjC,CAAwC,CAAxC,EAA2C,GAA3C;;AAEA,uBAAI,KAAK,QAAT,EAAmB,gCAAnB,EAAqD,OAArD;;AAEA,aAAO,IAAP,CACD,C;;;AAES,Q,EAAM,K,EAAO;AACrB,UAAM,eAAe,KAAK,SAAL,CAAe,IAAf,CAArB;;AAEA;AACI,mBAAa,OAAb,IAAwB,KAD5B;AAEI,WAAK,QAAL,CAAc,UAAd,CAAyB,IAAzB,CAA8B,EAAC,UAAD,EAAO,YAAP,EAA9B,CAFJ;;AAIA,aAAO,IAAP,CACD,C;;;AAES,Q,EAAM;AACd,aAAO,kBAAK,KAAK,QAAL,CAAc,UAAnB,EAA+B,EAAC,UAAD,EAA/B,CAAP,CACD,C;;;AAEY,Q,EAAM;AACjB,WAAK,SAAL,CAAe,WAAf,EAA4B,KAAK,WAAL,GAAmB,KAAK,WAAL,EAAnB,GAAwC,IAApE;;AAEA,aAAO,IAAP,CACD,C;;;AAEc,Q,EAAM;AACnB,WAAK,SAAL,CAAe,aAAf,EAA8B,KAAK,WAAL,GAAmB,KAAK,WAAL,EAAnB,GAAwC,IAAtE;;AAEA,aAAO,IAAP,CACD;;;;;;;AAMK,S,EAAO;AACX,UAAM,cAAc,iBAAI,KAAK,SAAL,CAAe,aAAf,CAAJ,EAAmC,OAAnC,CAApB;AACM,kBAAc,iBAAI,KAAK,SAAL,CAAe,WAAf,CAAJ,EAAiC,OAAjC,CADpB;;AAGA,wBAAO,WAAP,EAAoB,aAApB,EAAmC,EAAnC,CAAsC,MAAtC;AACA,wBAAO,SAAP,EAAkB,WAAlB,EAA+B,EAA/B,CAAkC,MAAlC;;AAEA,UAAM,SAAY,mBAAM,CAAN,EAAS,KAAT,CAAlB;AACA,UAAM,YAAY,sBAAO,SAAP,EAAkB,IAAlB,CAAuB,WAAvB,IAAsC,KAAxD;;AAEA,aAAO,OAAO,GAAP,CAAW,aAAK;AACrB,YAAM,QAAQ,sBAAO,WAAP,EAAoB,GAApB,CAAyB,IAAI,SAA7B,EAAyC,IAAzC,CAAd;AACM,cAAQ,sBAAO,KAAP,EAAc,GAAd,CAAkB,SAAlB,EAA6B,IAA7B,CADd;;AAGA,eAAO,IAAI,KAAJ,CAAU,MAAK,SAAf,EAA0B,MAAK,QAA/B,EAAyC,cAAzC,CAAwD,KAAxD;AACyC,oBADzC,CACsD,GADtD,CAAP,CAED,CANM,CAAP,CAOD,C;;;;AAEM;AACL,UAAM,cAAc,aAAG,SAAH,CAAa,KAAK,QAAlB,EAA4B,EAAC,WAAW,GAAZ,EAA5B,CAApB;;AAEA,aAAO,8BAAQ,KAAK,SAAL,GAAiB,GAAjB,GAAuB,WAA/B,EAA4C,EAAC,MAAM,IAAP,EAA5C,CAAP,CACD,C;;;;;AAIY,K","file":"query.js","sourcesContent":["import request from 'request-promise';\nimport moment from 'moment';\nimport qs from 'qs';\nimport {expect} from 'chai';\nimport {cloneDeep, castArray, set, get, find, isEmpty, extend, range} from 'lodash';\n\nclass Query {\n  constructor(endpoint, options) {\n    this._endpoint           = endpoint;\n    this._options            = cloneDeep(options);\n    this._options.itemFilter = isEmpty(this._options.itemFilter) ? [] : castArray(this._options.itemFilter);\n  }\n\n  setPage(page) {\n    expect(page, 'pages').to.be.within(1, 100);\n\n    set(this._options, 'paginationInput.pageNumber', page);\n\n    return this;\n  }\n\n  setEntriesPerPage(entries) {\n    expect(entries, 'entries').to.be.within(1, 100);\n\n    set(this._options, 'paginationInput.entriesPerPage', entries);\n\n    return this;\n  }\n\n  setFilter(name, value) {\n    const currentValue = this.getFilter(name);\n\n    currentValue\n      ? currentValue['value'] = value\n      : this._options.itemFilter.push({name, value});\n\n    return this;\n  }\n\n  getFilter(name) {\n    return find(this._options.itemFilter, {name});\n  }\n\n  setEndTimeTo(time) {\n    this.setFilter('EndTimeTo', time.toISOString ? time.toISOString() : time);\n\n    return this;\n  }\n\n  setEndTimeFrom(time) {\n    this.setFilter('EndTimeFrom', time.toISOString ? time.toISOString() : time);\n\n    return this;\n  }\n\n  /*\n   Splits query by making new queries with smaller time blocks\n   Used to overcome eBay 10000 entry return limit\n   */\n  split(parts) {\n    const endTimeFrom = get(this.getFilter('EndTimeFrom'), 'value'),\n          endTimeTo   = get(this.getFilter('EndTimeTo'), 'value');\n\n    expect(endTimeFrom, 'EndTimeFrom').to.exists;\n    expect(endTimeTo, 'EndTimeTo').to.exists;\n\n    const chunks    = range(0, parts);\n    const chunkSize = moment(endTimeTo).diff(endTimeFrom) / parts;\n\n    return chunks.map(n => {\n      const start = moment(endTimeFrom).add((n * chunkSize), 'ms'),\n            end   = moment(start).add(chunkSize, 'ms');\n\n      return new Query(this._endpoint, this._options).setEndTimeFrom(start)\n                                                     .setEndTimeTo(end);\n    });\n  }\n\n  call() {\n    const queryString = qs.stringify(this._options, {delimiter: '&'});\n\n    return request(this._endpoint + '?' + queryString, {json: true});\n  }\n}\n\n\nexport default Query;\n"]}